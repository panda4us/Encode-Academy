// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts@4.2.0/access/Ownable.sol";
import "@openzeppelin/contracts@4.2.0/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract VolcanoCoin2 is Ownable, ERC20("Volcano Coin", "VLC") {
    enum PaymentType { Unknown, Basic, Refund, Dividend, GroupPayment }
    struct Payment {
        uint256 amount;
        address recipient;
        uint256 payment_id;
        uint256 timestamp;
        PaymentType payment_type;
        string comment;
    }
    
    uint256 private counter = 0;
    mapping(address => Payment[]) records;
    address private admin;
    
    constructor() {
        _mint(msg.sender, 10000);
        admin = msg.sender;
    }
    

    modifier onlyAdmin {
        require(msg.sender == admin);
        _;
    }
    
    function addSupply() public onlyOwner() {
        _mint(owner(), totalSupply());
    }  
    
    function getRecords(address _addr) public view returns(Payment[] memory) {
        return records[_addr];
    }
    
    function _afterTokenTransfer(address sender, address recipient, uint amount) internal override{
        Payment memory new_payment = Payment(amount,recipient,block.timestamp,counter++,PaymentType.Unknown,"");
        records[sender].push(new_payment);
    }
    
    
    function getPaymentDetails(address sender, uint id) public view returns(Payment memory, int256) {
        for (uint i = 0; i < records[sender].length; i++) {
            if (records[sender][i].payment_id == id) {
                return (records[sender][i], int(i));
            }
        }
        Payment memory noPayment;
        return (noPayment, -1);
    }
    
    
    function updatePaymentDetails(uint id, PaymentType payment_type, string calldata comment) public returns(bool) {
        (, int256 i) = getPaymentDetails(msg.sender, id);
        if (i < 0) {
            return false;
        } else {
            records[msg.sender][uint(i)].payment_type = payment_type;
            records[msg.sender][uint(i)].comment = comment;
            return true;
        }
        
    }
    
    function updatePaymentDetails(address sender, uint id, PaymentType payment_type, string calldata comment) public onlyAdmin returns(bool) {
        (_, int256 i) = getPaymentDetails(sender, id);
        if (i < 0) {
            return false;
        } else {
            records[sender][uint(i)].payment_type = payment_type;
            records[sender][uint(i)].comment = string(abi.encodePacked(comment," updated by ",Strings.toHexString(uint256(uint160(admin)))));
            return true;
        }
    }
    
    
}
